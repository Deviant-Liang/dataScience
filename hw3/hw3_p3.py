# -*- coding: utf-8 -*-
"""hw3_p3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/173MR92BFbx_Rd5nBgyrT1obkvahynSP4
"""

import pandas as pd
import numpy as np
from statsmodels.tsa.seasonal import seasonal_decompose
  
from google.colab import drive
drive.mount('/content/drive/')
data_train = pd.read_csv('drive/MyDrive/hw3_prob3/train.csv', parse_dates=['Date'], index_col='Date')
data_test = pd.read_csv('drive/MyDrive/hw3_prob3/test.csv', parse_dates=['Date'], index_col='Date')

data = pd.concat([data_train, data_test])
data.drop(['Open', 'High', 'Low', 'Adj Close', 'Volume'], axis=1, inplace=True)

from statsmodels.tsa.stattools import acf

# Create Training and Test
train = data.Close[:]
test = data.Close[204:]

#!pip install numpy
#!pip install pmdarima
import pmdarima as pm
smodel = pm.auto_arima(train, order=1, seasonal_order=(0, 1, 1, 12), start_params=None, method='lbfgs', maxiter=50, suppress_warnings=False, 
                       out_of_sample_size=0, scoring='mse', scoring_args=None, trend=None)
smodel.summary()

from statsmodels.tsa.statespace.sarimax import SARIMAX
import matplotlib.pyplot as plt


sarima_model = SARIMAX(train, order=(3, 0, 1), seasonal_order=(0, 1, 1, 12), enforce_invertibility=False, enforce_stationarity=False)
sarima_fit = sarima_model.fit()
#sarima_fit.summary()
sarima_pred = sarima_fit.get_prediction('2020-11-04', '2021-11-04')
predicted_means = sarima_pred.predicted_mean

d1 = test - predicted_means['2021-09-06':]
sarima_mse = (1/int(len(test)))*d1.dot(d1) 
print("MSE = ", sarima_mse)

# Plot
plt.figure(figsize=(12,5), dpi=100)
plt.plot(train, label='training')
plt.plot(test, label='actual')
plt.plot(predicted_means['2021-09-06':], label='forecast')
plt.title('Forecast vs Actuals')
plt.legend(loc='upper left', fontsize=8)
plt.show()